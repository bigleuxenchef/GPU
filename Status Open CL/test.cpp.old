#include <stdio.h>
#include <stdlib.h>
#ifdef __APPLE__
#include <OpenCL/opencl.h>
#else
#include <CL/cl.h>
#endif

//using namespace std;

int main(int argc, char* const argv[])
{

    //Number of devices
    cl_uint num_devices, i;
       char* value;
       size_t valueSize;
//       cl_uint platformCount;
//       cl_platform_id* platforms;
 //      cl_uint deviceCount;
       cl_uint maxComputeUnits;
    //Getting device ids
    clGetDeviceIDs(NULL, CL_DEVICE_TYPE_ALL, 0, NULL, &num_devices);

    cl_device_id* devices = (cl_device_id*)calloc(sizeof(cl_device_id), num_devices);
    clGetDeviceIDs(NULL, CL_DEVICE_TYPE_ALL, num_devices, devices, NULL);

    char buf[128];
    for (i = 0; i < num_devices; i++)
        {cl_device_type cl_buf;
            clGetDeviceInfo(devices[i], CL_DEVICE_NAME, 128, buf, NULL);
            fprintf(stdout, "Device %s supports ", buf);

            clGetDeviceInfo(devices[i], CL_DEVICE_VERSION, 128, buf, NULL);

            //Printing device info
            fprintf(stdout, "%s\n", buf);


                                   // print hardware device version
                                   clGetDeviceInfo(devices[i], CL_DEVICE_VERSION, 0, NULL, &valueSize);
                                   value = (char*) malloc(valueSize);
                                   clGetDeviceInfo(devices[i], CL_DEVICE_VERSION, valueSize, value, NULL);
                                   printf(" %d.%d Hardware version: %s\n", i+1, 1, value);
                                   free(value);

                                   // print software driver version
                                   clGetDeviceInfo(devices[i], CL_DRIVER_VERSION, 0, NULL, &valueSize);
                                   value = (char*) malloc(valueSize);
                                   clGetDeviceInfo(devices[i], CL_DRIVER_VERSION, valueSize, value, NULL);
                                   printf(" %d.%d Software version: %s\n", i+1, 2, value);
                                   free(value);

                                   // print c version supported by compiler for device
                                   clGetDeviceInfo(devices[i], CL_DEVICE_OPENCL_C_VERSION, 0, NULL, &valueSize);
                                   value = (char*) malloc(valueSize);
                                   clGetDeviceInfo(devices[i], CL_DEVICE_OPENCL_C_VERSION, valueSize, value, NULL);
                                   printf(" %d.%d OpenCL C version: %s\n", i+1, 3, value);
                                   free(value);

                                   // print parallel compute units
                                   clGetDeviceInfo(devices[i], CL_DEVICE_MAX_COMPUTE_UNITS,
                                           sizeof(maxComputeUnits), &maxComputeUnits, NULL);
                                   printf(" device id %lu\n %d.%d Parallel compute units: %d\n", devices[i],i+1, 4, maxComputeUnits);

            clGetDeviceInfo(devices[i], CL_DEVICE_TYPE, 128, &cl_buf, NULL);

                        //Printing device info
            switch (cl_buf) {

            case CL_DEVICE_TYPE_DEFAULT   : fprintf(stdout, "CL_DEVICE_TYPE_DEFAULT\n"); break;
            case CL_DEVICE_TYPE_CPU          : fprintf(stdout, "CL_DEVICE_TYPE_CPU\n"); break;
            case CL_DEVICE_TYPE_GPU        : fprintf(stdout, "CL_DEVICE_TYPE_GPU\n"); break;
            case CL_DEVICE_TYPE_ACCELERATOR    : fprintf(stdout, "CL_DEVICE_TYPE_ACCELERATOR\n"); break;
            case CL_DEVICE_TYPE_ALL : fprintf(stdout, "CL_DEVICE_TYPE_ALL\n"); break;

            }


        }
    free(devices);
}
